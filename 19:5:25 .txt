# Delete, Drop and truncate
# drop is for removing databases, tables and columnns, a permanent operation

use vit;
show tables from vit;

drop table eee;

desc eee;
alter table eee drop column age;

# Delete : for deleting anything any entity in a temporary state, it's not permanent, so the data removed can be retrieved given you have a valid savepoint
# it doesnot touch the structure of the table 

CREATE TABLE Worker (
	WORKER_ID INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
	FIRST_NAME CHAR(25),
	LAST_NAME CHAR(25),
	SALARY INT(15),
	JOINING_DATE DATETIME,
	DEPARTMENT CHAR(25)
);

INSERT INTO Worker 
	(WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT) VALUES
		(001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
		(002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
		(003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
		(004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
		(005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
		(006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
		(007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
		(008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
        
        
        select * from Worker;
        delete from worker;
        
        delete from worker where department="HR";
        
        # truncate : removes all the rows from the table, the data may be deleted but the structuerd will remain unaltered but the removed data cant be retrieved 
        
        truncate table worker;


use vit;
create database bba;
create table bba(
stud_ID int,
name varchar(20)
);

select * from bba;
start transaction;
insert into bba values(1002,"Amit");
savepoint a11;
insert into bba values(1003,"Ananya");
savepoint a12;
delete from bba where stud_ID=1002;


rollback to a12;
commit; # it deletes all savepoints and commit the changes once in for all,

# select

select first_name from Worker;

# here we are printing the data under a specific category or alias, but it doesnt alter anything in the original table
# just returns the query data under an alias :p 


select first_name as employee_name from Worker;

#Operators and logical operators

select * from Worker;


select first_name, salary from worker where department !="HR";


select first_name, salary from worker where worker_id >2;
select first_name, department from worker where salary <=200000;
select first_name, salary from worker where department !="HR";
select first_name, joining_date from worker where salary>=300000;
select first_name, joining_date from worker where salary <100000;

select first_name from worker where salary>200000 and department ="HR";
select first_name, salary from worker where salary<200000 and (department ="HR" or department= "Admin");
select first_name, salary from worker where salary>100000 and salary<300000  and (department ="Account" or department= "Admin");



# The parentheses in SQL are used to control the order of evaluationâ€”just like in math.
#In SQL, AND has higher precedence than OR. So without parentheses, this query:

select first_name, salary from worker where salary<200000 and department ="HR" or department= "Admin";

#(salary < 200000 AND department = 'HR') OR department = 'Admin';

# The in keyword : reduces the number of or clauses makes returning elements easier and clutter free

select * from worker where worker_id in(1,4,3,5);
select * from worker where worker_id not in(1,4,3,5);

#in even worker id pos, who is getting more salary and the person should be from either hr and admin dept 

select first_name, salary from worker where worker_id in(2,4,6,8) and (department= 'admin' or department='hr');

select first_name, salary from worker where worker_id%2 =0 and (department= 'admin' or department='hr') order by salary desc;
